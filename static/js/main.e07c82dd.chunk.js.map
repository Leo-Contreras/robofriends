{"version":3,"sources":["Components/Card.js","Components/CardList.js","Components/SearchBox.js","Components/Scroll.js","Components/ErrorBoundry.js","Containers/App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","id","name","email","CardList","robots","cardArray","map","user","i","SearchBox","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchfield","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","React","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2OAmBeA,EAjBF,SAACC,GAGb,OACE,sBAAKC,UAAW,wCAAhB,UACG,qBAAKC,IAAM,SAASC,IAAG,+BAA0BH,EAAMI,MACvD,gCACA,+BAAKJ,EAAMK,KAAX,OACA,kCAAKL,EAAMM,gBCYFC,EAnBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACbC,EAAYD,EAAOE,KAAI,SAACC,EAAKC,GAClC,OACE,cAAC,EAAD,CAEAR,GAAMI,EAAOI,GAAGR,GAChBC,KAAMG,EAAOI,GAAGP,KAChBC,MAAOE,EAAOI,GAAGN,OAHVM,MAOV,OACC,8BACEH,KCIWI,EAjBG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aACpB,OACE,qBAAKb,UAAU,KAAf,SACA,uBACEA,UAAU,mCACVc,KAAM,SACNC,YAAc,gBACdC,SAAYH,OCGDI,EAVA,SAAClB,GACf,OACC,qBAAKmB,MAAO,CAACC,UAAU,SAASC,OAAO,kBAAmBC,OAAQ,SAAlE,SACEtB,EAAMuB,YCoBKC,E,kDAtBd,WAAYxB,GAAQ,IAAD,8BAClB,cAAMA,IACDyB,MAAQ,CACZC,UAAU,GAHO,E,qDAOnB,SAAkBC,EAAOC,GACxBC,KAAKC,SAAS,CAACJ,UAAS,M,oBAIzB,WAEC,OAAGG,KAAKJ,MAAMC,SACN,mDAEDG,KAAK7B,MAAMuB,a,GAlBOQ,aCkDZC,G,wDA7Cd,aAAe,IAAD,8BACb,gBAcDC,eAAiB,SAACC,GACjB,EAAKJ,SAAS,CAACK,YAAaD,EAAME,OAAOC,SAdzC,EAAKZ,MAAQ,CACZjB,OAAQ,GACR2B,YAAa,IAJD,E,qDASf,WAAoB,IAAD,OAClBG,MAAM,8CACJC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKZ,SAAS,CAAEtB,OAAQkC,S,oBAOxC,WACC,MAA+Bb,KAAKJ,MAA7BjB,EAAP,EAAOA,OAAS2B,EAAhB,EAAgBA,YACVQ,EAAiBnC,EAAOoC,QAAO,SAAAC,GACpC,OAAOA,EAAMxC,KAAKyC,cAAcC,SAASZ,EAAYW,kBAEtD,OAAItC,EAAOwC,OAIV,sBAAK/C,UAAY,KAAjB,UACA,oBAAIA,UAAW,KAAf,yBACA,cAAC,EAAD,CAAWa,aAAce,KAAKI,iBAC9B,cAAC,EAAD,UACC,cAAC,EAAD,UACG,cAAC,EAAD,CAAUzB,OAAQmC,WARf,6C,GA1BQM,IAAMlB,YCKTmB,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,QCCdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.e07c82dd.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = (props) => {\r\n\r\n\r\n\treturn (\r\n\t\t\t<div className ='tc bg-light-blue dib br3 pa3 ma2 grow'>\r\n\t\t\t   <img alt = 'robots' src={`https://robohash.org/${props.id}`} />\r\n\t\t\t   <div>\r\n\t\t\t   <h2>{props.name} </h2>\r\n\t\t\t   <p> {props.email}</p>\r\n\r\n\t\t\t   </div>\r\n\t\t\t</div>\r\n\r\n\t\t);\r\n\t}\r\n\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n const cardArray = robots.map((user,i) => {\r\n \treturn (\r\n \t\t\t<Card\r\n \t\t\tkey = {i} \r\n \t\t\tid = {robots[i].id} \r\n \t\t\tname={robots[i].name} \r\n \t\t\temail={robots[i].email} \r\n \t\t\t/>\r\n\t\t);\r\n })\r\n return (\r\n \t<div>\r\n \t\t{cardArray}\r\n \t</div>\r\n \t);\r\n\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\n\r\nconst SearchBox = ({searchChange}) => {\r\nreturn (\r\n\t\t<div className='tc'>\r\n\t\t<input \r\n\t\t  className='pa3 ba b--green bg-lightest-blue'\r\n\t\t  type ='search' \r\n\t\t  placeholder = 'Search Robots'\r\n\t\t  onChange = {searchChange}\r\n\t\t/>\r\n\r\n\t\t</div>\r\n\t);\r\n\r\n}\r\n\r\n\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\n\r\nconst Scroll = (props) => {\r\n\treturn(\r\n\t\t<div style={{overflowY:'scroll',border:'5px solid black', height: '800px' }}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t\t);\r\n};\r\n\r\n\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\n\r\nclass ErrorBoundry extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\thasError: false \r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidCatch(error, info) {\r\n\t\tthis.setState({hasError:true})\r\n\r\n\t}\r\n\r\n\trender() {\r\n\r\n\t\tif(this.state.hasError) \r\n\t\t\treturn <h1>Ooops. Errorcito </h1>\r\n\r\n\t\treturn this.props.children\r\n\t}\r\n\r\n}\r\n\r\nexport default ErrorBoundry;","import React from 'react';\r\nimport CardList from '../Components/CardList';\r\nimport SearchBox from '../Components/SearchBox';\r\nimport Scroll from '../Components/Scroll';\r\nimport ErrorBoundry from '../Components/ErrorBoundry';\r\nimport './App.css'\r\n\r\nclass App extends React.Component {\r\n\tconstructor() {\r\n\t\tsuper()\r\n\t\tthis.state = {\r\n\t\t\trobots: [],\r\n\t\t\tsearchfield: ''\r\n\t\r\n\t}\r\n}\r\n\r\ncomponentDidMount(){\r\n\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t.then(response => response.json())\r\n\t\t.then(users => this.setState({ robots: users}));\r\n}\r\n\r\n\tonSearchChange = (event) => {\r\n\t\tthis.setState({searchfield: event.target.value})\r\n\t\t\r\n\t}\r\n\trender(){\r\n\t\tconst {robots , searchfield} = this.state;\r\n\t\tconst filteredRobots = robots.filter(robot =>{\r\n\t\t\treturn robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n\t\t})\r\n\t\tif(!robots.length){\r\n\t\t\treturn <h1>Loading</h1>\r\n\t\t}else \r\n\t\treturn (\r\n\t\t\t<div className = 'tc'>\r\n\t\t\t<h1 className= 'f2' >RoboFriends</h1>\r\n\t\t\t<SearchBox searchChange={this.onSearchChange}/>\r\n\t\t\t<Scroll>\r\n\t\t\t\t<ErrorBoundry>\r\n\t\t\t\t   <CardList robots={filteredRobots} />\r\n\t\t\t\t</ErrorBoundry>\r\n\t\t\t</Scroll>\r\n\t\t\t</div>\r\n\r\n\t\t\t);\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Containers/App';\nimport 'tachyons';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}